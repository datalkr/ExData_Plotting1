q1_data<-read.csv("C:/Users/Lisa/Documents/Coursera/homework files/rprog_data_quiz1_data/hw1_data.csv")
names(q1_data)
colnames(q1_data)
row.names(q1_data)
print(q1_data[1:6])
print(q1_data[1:6,])
data_file(47)
q1_data(47)
print(q1_data[47,])
subset(q1_data, Ozone >31 & Temp >90)
mean(data_file[, “Ozone”], na.rm = TRUE
new_data<-subset(q1_data, Ozone >31 & Temp>90)
mean(new_data[,"Solar.R"], na.rm=TRUE)
temp_data<-subset(q1_data, Month=6)
temp_data
mean(data_file[, “Temp”], na.rm = TRUE
mean(q1_data[, "Temp"], na.rm=TRUE)
subset(q1_data, Month=5)
new_data<-subset(q1_data, Ozone >31 & Temp>90)
new_data<-subset(q1_data, Ozone >31 & Temp>90)
> mean(new_data[,"Solar.R"], na.rm=TRUE)
new_data<-subset(q1_data, Ozone >31 & Temp>90)
> mean(new_data[,"Solar.R"], na.rm=TRUE)
subset(q1_data, Ozone >31 & Temp>90
)
subset(q1_data, Ozone >31 & Month=6)
subset(q1_data, Ozone >31 & Month="6")
subset(q1_data, Ozone >31 & Month==6)
month_data<-subset(q1_data, Month==6)
month_data
mean(month_data[, "Temp"], na.rm=TRUE)
month_data<-subset(q1_data, Month==5)
month_data
mean(month_data[, "Ozone"])
max(month_data[, "Ozone"])
month_data
mean(month_data[, "Temp"], na.rm=TRUE)
max
max(month_data[, "Ozone"], na.rm=TRUE)
library(swirl)
ls()
rm(list=ls())
swirl()
my_vector<-c(1:20)
c()
my
my_vector(1:20)
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector<-c(4,5))
dim(my_vector)<-c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
?(matrix)
?matrix
my_matrix2<-(1:20, nrow=4, nco=5, byrow=FALSE, dimnames=NULL)
my
my_matrix2
this is wrong
my_matrix2<-matrix(1:20, nrow=4, nco=5, byrow=FALSE, dimnames=NULL)
idential(my_matrix, my_matrix2)
identical()
?identical
identical(my_matrix, my_matrix2)
patients<-c("Bill, "Gina", "Kelly", "Sean"")
patients<-c("Bill, "Gina", "Kelly", "Sean)
patients<-c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data<-data.frame(patients, my_matrix)
my_data
class(my_data)
cnames<-("patient", "age", "weight", "bp", "rating", "test")
cnames<-c("patient", "age", "weight", "bp", "rating", "test")
colnames(cnames, my_data)
colname
colnames()
colnames(cnames, my_data)
colnames(cnames, my_data)
colnames(cnames, my_data)
colnames(cnames, my_data)
colnames(cnames, my_data)
colnames(cnames, my_data)
colnames(cnames, my_data)
colnames(cnames, my_data)
colnames(cnames, my_data)
colnames(cnames, my_data)
colnames(cnames, my_data)
colnames(cnames, my_data)
cnames<-c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data)<-cnames
my_data
TRUE==TRUE
(FALSE==TRUE)==FALSE
6==7
6,7
6<7
10<=10
5!=7
!(5==7)
FALSE&FALSE
TRUE & c(TRUE, FALSE, FALSE)
c(TRUE, TRUE, TRUE) & c(TRUE, FALSE, FALSE)
c(TRUE, TRUE, TRUE) && c(TRUE, FALSE, FALSE)
TRUE&&c(TRUE,FALSE,FALSE)
true|c(true,false,false)
TRUE|c(TRUE,FALSE,FALSE)
c(TRUE, TRUE, TRUE) & c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins','twins')
xor(5==6, !FALSE)
ints<-sample(10)
ints
ints>5
which(ints>7)
any(ints <0)
all(ints>0)
by
exit
quit
list.files()
andy<-read.csv("diet_data/Andy.csv")
head(andy)
quit()
cube <- function(x, n) {
x^3
}
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
print(y)
x,_10
cx<-10
x<-1:10
x
if (x>5) {x<-0}
library(datasets)
data(mtcars)
?mtcars
head(data)
header(data)
head(mtcars)
let avg4cyl = mtcars.Data |>Seq.filter (fun x -> x?cyl = "4") |>Seq.averageBy (fun x -> x?hp.AsFloat())
avg4cyl=mtcars.Data
let avg4cyl=mtcars.Data
abs(mean(mtcars[mtcarscyl==4,] hp) - mean(mtcars[mtcarscyl==8,] hp))
abs(mean(mtcars[mtcarscyl==4,] hp) - mean(mtcars[mtcarscyl==8,] hp))
mean(mtcars[cyl==4,] hp)
mean(mtcars[mtcars cyl==4,] hp)
mtcars(cyl)
mtcars[,2]
mean(mtcars[mtcars cyl==4,] hp)
abs(hps.["4"]-hps.["8"])
abs(mean(mtcars[mtcars$cyl==4,]$hp) -mean(mtcars[mtcars$cyl==8,]$hp))
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
9
submit()
submit()
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL    #Sets default values if cacheSolve hasn't been used
y <- NULL
setm <- function(y) { #Sets value of the matrix
x <<- y           #cache inputted matrix; cacheSolve checks if it changed
m <<- NULL
}
getm <- function() x
setmatrix <- function(solve) m<<- solve
getmatrix <- function() m
list(setm=setm, getm=getm, setmatrix=setmatrix, getmatrix=getmatrix)
}
## cacheSolve - function computes the inverse of the special "matrix"
## returned by the makeCacheMatrix function. If the inverse has been
## calcualted, andthe matrix hasn't changed, then the cacheSolve should
## retrieve the inverse from the cache
cacheSolve <- function(x=matrix(),...) {
m <- x$getmatrix()  #get value of input matrix
if(!is.null(m)) {   #check to see if cacheSolve has been run before
return(m)
}
matrix <- x$get()
m <- solve(matrix, ...) #compute value of the inverse of the input matrix
x$setmatrix(m)
return(m)
}
mat <- matrix(data = c(4,2,7,6), nrow = 2, ncol = 2)
mat2 <- makeCacheMatrix(mat)
cacheSolve(mat2)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL # sets the value of m to NULL (provides a default if cacheSolve has not yet been used)
y <- NULL # sets the value of y to NULL (provides a default if cacheSolve has not yet been used)
setmatrix <- function(y) { #set the value of the matrix
x <<- y ## caches the inputted matrix so that cacheSolve can check whether it has changed (note this is within the setmatrix function)
m <<- NULL # # sets the value of m (the matrix inverse if used cacheSolve) to NULL
}
getmatrix <- function()
x #get the value of the matrix
setinverse <- function(solve)
m <<- solve # compute the value of the inverse
getinverse <- function()
m # get the value of the inverse and caches it within the setinverse function
list(setmatrix = setmatrix, getmatrix = getmatrix, # creates a list to house the four functions
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function (x=matrix(), ...) {
# Need to compare matrix to what was there before!
m <- x$getinverse() # if an inverse has already been calculated this gets it
if(!is.null(m)){ # check to see if cacheSolve has been run before
if(x$setmatrix() == x$getmatrix()) { # check that matrix hasn't changed, and if it hasn't, sends a text message and returns the cached matrix
message("getting cached data")
m <- x$getinverse()
}
return(m)
}
# otherwise
y <- x$getmatrix() # run the getmatrix function to get the value of the input matrix
x$setmatrix(y) # run the setmatrix function on the input matrix to cache it
m <- solve(y, ...) # compute the value of the inverse of the input matrix
x$setinverse(m) # run the setinverse function on the inverse to cache the inverse # return the inverse
m
mat <- matrix(data = c(4,2,7,6), nrow = 2, ncol = 2)
mat2 <- makeCacheMatrix(mat)
cacheSolve(mat2)
cacheSolve(mat2)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
set.seed(10)
x <- rep(0:1,each=5)
e <- rnorm(10,0,20)
y <- .5+2+x+e
library(datasets)
Rprof()
fit <- lm(y~x1+x2)
x
y
x1
x2
x1=2
x1=4
fit <- lm(y~x1+x2)
?lm
set.seed(1)
rpois(5,2)
swirl()
library(swirl)
rm(list=ls())
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(10)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str()
str(plants)
sample()
?sample
sample(1:6, 4, replace=TRUE)
sample(1:6, 4, replace=TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1), 100)
flips <- sample(c(0,1), 100)
flips <- sample(c(0,1), 100)
flips <- sample(c(0,1), 100)
flips <- sample(c(0,1), 100)
flips <- sample(c(0,1), 100)
sample
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3,
| 0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3,.7))
flips
sum(flips)
rbinom()
rbinom(100)
rbinom(100,2
)
rbinom(100,.7)
rbinom(100,.7)
rbinom(100,.7)
rbinom(100,.7)
rbinom(100,.7)
rbinom(100,.7)
rbinom(100,.7)
rbinom(100,.7)
rbinom(100,.7)
rbinom(100,.7)
rbinom(100,.7)
rbinom(100,.7)
rbinom(100,.7)
rbinom(100,.7)
rbinom(100,.7)
rbinom(100,.7)
rbinom(100,.7)
rbinom(100,.7)
rbinom(100,.7)
rbinom(100,.7)
rbinom(100,.7)
rbinom(100,.7)
)
)
rbinom(100,.7)
rbinom(100,.7)
rbinom(100,.7)
rbinom(100,.7)
rbinom(100,.7)
rbinom(100,.7)
rbinom(100,.7)
flips
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(1, size=100, prob=.7)
flips2 <- rbinom(100, size=1, prob=.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10,100,25)
?rpois
rpois()
rpois(5,10)
replicate(100, rpois(5, 10))
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot()
plot(x,y,
)
plot(x,y,
)
plot(x,y,
)
plot(x,y,
)
plot(x,y,
)
plot(x,y,
)
plot(x,y,
)
plot(x,y,
)
plot(x,y,
)
plot(x,y,
)
plot(x,y,
)
plot(x,y,
)
plot(cars)
plot(x = cars$speed, y = cars$dist)
plot(y = cars$speed, x = cars$dist)
plot(x = cars$Speed, y = cars$dist)
plot(x = cars$speed, y = cars$dist, Speed)
plot(x = cars$speed, y = cars$dist, xlabel="Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance", xlab="Speed")
?plot
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance", xlab="Speed", main="My Plot")
plot(x = cars$speed, y = cars$dist, main="My Plot")
plot(cars, main="My Plot")
plot(cars, sub="My Plot Subtitle")
plot(cars, col=2)
plot(cars, xlim=c(10,15)
)
plot(cars, pch=2)
load(mtcars)
mtcars
data(mtcars)
?boxplot
boxplot(formula=mpg~cyl, data=mtcars)
hist(mtcars$mpg)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
2
submit()
best <- function(state, outcome) {
## loading outcome data
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
setwd ("C:/Users/Lisa/Documents/Coursera/homework files/rprog_data_ProgAssignment3-data")
outcomeDfr<-read.csv("outcome-of-care-measures.csv", colClasses="character")
## Coerce character into numeric
suppressWarnings(outcomeDfr[, 11] <- as.numeric(outcomeDfr[, 11]))
suppressWarnings(outcomeDfr[, 17] <- as.numeric(outcomeDfr[, 17]))
suppressWarnings(outcomeDfr[, 23] <- as.numeric(outcomeDfr[, 23]))
## Create a data frame of freq by state Remove row.names
tableDfr <- data.frame(State = names(tapply(outcomeDfr$State, outcomeDfr$State,
length)), Freq = tapply(outcomeDfr$State, outcomeDfr$State, length))
rownames(tableDfr) <- NULL
## Create a data frame of possible inputs and respective columns
inputDfr <- data.frame(Outcome = c("heart attack", "heart failure", "pneumonia"),
Col = c(11, 17, 23))
## Check that state and outcome are valid
if (nrow(tableDfr[tableDfr$State == state, ]) == 0)
stop("invalid state")
if (nrow(inputDfr[inputDfr$Outcome == outcome, ]) == 0)
stop("invalid outcome")
## Return hospital name in that state with lowest THIRTY(30)-day death
## rate Create a data frame with given ONE (1) state Determine the relevant
## row and column
stateDfr <- outcomeDfr[outcomeDfr$State == state, ]
colNum <- inputDfr[inputDfr$Outcome == outcome, 2]
rowNum <- which.min(stateDfr[, colNum])
return(stateDfr[rowNum, ]$Hospital.Name)
}
#best("TX", "heart attack")
submit()
question1 <- read.table("C:/Users/Lisa/Documents/Coursera/homework files/course 3/getdata_data_ss06hid.csv")
head(question1)
question1 <- read.table("C:/Users/Lisa/Documents/Coursera/homework files/course 3/getdata_data_ss06hid.csv", sep=",", header=TRUE)
head(question1)
length(question1$VAL[!is.na(question1$VAL) & question1$VAL==24]))
length(question1$VAL[!is.na(questoin1$VAL) & question1$VAL==24])
length(question1$VAL[!is.na(question1$VAL) & question1$VAL==24])
head(question1, 2)
summary(question1, 2)
table(question1$VAL)
table(question1$FES)
summary(question1$FES)
sapply(split(DT$pwgtp15,DT$SEX),mean)
library(data.time)
library(data.table)
DT <- fread(input="getdata-data-ss06pid.csv", sep=",")
DT <- fread(input="C:/Users/Lisa/Documents/Coursera/homework files/course 3/getdata_data_ss06pid.csv", sep=",")
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(mean(DT$pwgtp15,by=DT$SEX) )
system.time(rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2] )
system.time(rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2] )
system.time()
system.time(tapply(DT$pwgtp15,DT$SEX,mean) )
system.time(DT[,mean(pwgtp15),by=SEX] )
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
system.time(mean(DT[DT$SEX==1,]$pwgtp15))
system.time(mean(DT[DT$SEX==2,]$pwgtp15))
system.time(rowMeans(DT)[DT$SEX==1])
source('~/Coursera/Course 4 - Exploratory Data Analysis/ExData_Plotting1/Plot3.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
